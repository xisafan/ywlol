name: iOS-ipa-build

on:
  workflow_dispatch:

jobs:
  build-ios:
    name: 🎉 iOS Build
    runs-on: macos-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      # 1. 显示环境信息
      - name: Show environment info
        run: |
          flutter --version
          xcodebuild -version
          pod --version

      # 2. 深度清理项目
      - name: Deep clean project
        run: |
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock ios/.symlinks ~/.pub-cache
          rm -rf ~/Library/Developer/Xcode/DerivedData/* ~/Library/Caches/CocoaPods

      # 3. 安装Flutter依赖
      - name: Install Flutter dependencies
        run: flutter pub get

      # 4. 生成标准Podfile
      - name: Generate standard Podfile
        run: |
          cd ios
          if [ ! -f "Podfile" ]; then
            cat > Podfile <<EOF
          platform :ios, '11.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          project 'Runner', { 'Debug' => :debug, 'Profile' => :release, 'Release' => :release }

          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. Run 'flutter pub get' first."
            end
            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found"
          end

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              # 关键：Podfile中额外禁用签名（覆盖插件自带配置）
              target.build_configurations.each do |config|
                config.build_settings["DEVELOPMENT_TEAM"] = ""
                config.build_settings["CODE_SIGNING_REQUIRED"] = "NO"
                config.build_settings["CODE_SIGNING_ALLOWED"] = "NO"
                config.build_settings["CODE_SIGN_IDENTITY"] = ""
              end
            end
          end
          EOF
          fi

      # 5. 执行pod install（确保Pods配置正确）
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod repo update --verbose
          pod install --verbose
          
          # 验证Pods.xcodeproj有效性
          if [ ! -d "Pods/Pods.xcodeproj" ] || [ ! -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
            echo "❌ Invalid Pods.xcodeproj!"
            ls -la Pods/Pods.xcodeproj/
            exit 1
          fi
          echo "✅ Pod install completed successfully"

      # 6. 关键修复：用xcodebuild直接构建（强制禁用签名）
      - name: Build iOS with xcodebuild (force disable signing)
        run: |
          cd ios
          
          # 定义构建参数（强制覆盖签名配置）
          XCODE_WORKSPACE="Runner.xcworkspace"
          XCODE_SCHEME="Runner"
          BUILD_DIR="$PWD/build"  # 构建产物输出目录
          CONFIGURATION="Release"
          SDK="iphoneos"  # 针对真机架构（若要模拟器用iphonesimulator）
          
          # 执行xcodebuild构建：直接传递签名禁用参数
          xcodebuild build \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk "$SDK" \
            -derivedDataPath "$BUILD_DIR/DerivedData" \
            -archivePath "$BUILD_DIR/Runner.xcarchive" \
            # 核心签名参数：强制禁用
            DEVELOPMENT_TEAM="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGN_ENTITLEMENTS="" \
            # 抑制OpenGLES废弃警告
            OTHER_SWIFT_FLAGS="-DGLES_SILENCE_DEPRECATION" \
            OTHER_CFLAGS="-DGLES_SILENCE_DEPRECATION" \
            # 额外参数：避免构建缓存干扰
            clean \
            -quiet  # 减少日志冗余（需要详细日志可删除）
          
          # 验证构建产物（xcodebuild输出路径：BUILD_DIR/Products/Release-iphoneos/Runner.app）
          APP_PATH="$BUILD_DIR/Products/$CONFIGURATION-$SDK/Runner.app"
          if [ -d "$APP_PATH" ]; then
            echo "✅ xcodebuild succeeded! App path: $APP_PATH"
            # 复制到Flutter默认路径，便于后续打包
            mkdir -p ../../build/ios/iphoneos/
            cp -R "$APP_PATH" ../../build/ios/iphoneos/
          else
            echo "❌ xcodebuild failed! App not found at $APP_PATH"
            # 输出构建日志供排查
            cat "$BUILD_DIR/DerivedData/Logs/Build/Report.build.log"
            exit 1
          fi

      # 7. 打包IPA（使用xcodebuild生成的产物）
      - name: Package IPA
        run: |
          BUILD_PATH="build/ios/iphoneos"
          # 验证Runner.app存在
          if [ ! -d "$BUILD_PATH/Runner.app" ]; then
            echo "❌ Runner.app missing at $BUILD_PATH"
            exit 1
          fi
          
          # 生成IPA（iOS要求Payload目录结构）
          mkdir -p "$BUILD_PATH/Payload"
          mv "$BUILD_PATH/Runner.app" "$BUILD_PATH/Payload/"
          cd "$BUILD_PATH"
          zip -qq -r -9 FlutterIpaExport.ipa Payload
          
          # 验证IPA
          if [ -f "FlutterIpaExport.ipa" ]; then
            echo "✅ IPA generated! Size: $(du -sh FlutterIpaExport.ipa)"
          else
            echo "❌ IPA generation failed"
            exit 1
          fi

      # 8. 上传产物
      - name: Upload IPA to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-ios-ipa
          path: build/ios/iphoneos/FlutterIpaExport.ipa
          retention-days: 30
