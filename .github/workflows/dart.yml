name: iOS-ipa-build

on:
  workflow_dispatch:

jobs:
  build-ios:
    name: 🎉 iOS Build
    runs-on: macos-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      # 1. 显示环境信息
      - name: Show environment info
        run: |
          flutter --version
          xcodebuild -version
          pod --version

      # 2. 深度清理项目
      - name: Deep clean project
        run: |
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock ios/.symlinks ~/.pub-cache
          rm -rf ~/Library/Developer/Xcode/DerivedData/* ~/Library/Caches/CocoaPods

      # 3. 安装Flutter依赖
      - name: Install Flutter dependencies
        run: flutter pub get

      # 4. 生成标准Podfile
      - name: Generate standard Podfile
        run: |
          cd ios
          if [ ! -f "Podfile" ]; then
            cat > Podfile <<EOF
          platform :ios, '11.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          project 'Runner', { 'Debug' => :debug, 'Profile' => :release, 'Release' => :release }

          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. Run 'flutter pub get' first."
            end
            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found"
          end

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
            end
          end
          EOF
          fi

      # 5. 执行pod install + 修复路径检查（核心修复）
      - name: Install CocoaPods dependencies (fix path check)
        run: |
          # 进入ios目录并保持在此目录执行后续命令（避免路径混乱）
          cd ios
          
          # 执行pod install（保留详细日志）
          pod repo update --verbose
          pod install --verbose
          
          # 关键修复1：明确Pods.xcodeproj的绝对路径，避免相对路径歧义
          PODS_PROJECT_PATH="$PWD/Pods/Pods.xcodeproj"
          
          # 关键修复2：添加延迟+重试检查（应对文件生成延迟）
          echo "Checking if $PODS_PROJECT_PATH exists..."
          RETRY_COUNT=0
          MAX_RETRIES=3
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if [ -f "$PODS_PROJECT_PATH" ]; then
              echo "✅ Pods.xcodeproj found at: $PODS_PROJECT_PATH"
              break
            else
              echo "⚠️ Retry $((RETRY_COUNT+1)): Pods.xcodeproj not found yet. Waiting 2 seconds..."
              sleep 2
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done
          
          # 最终检查：若多次重试仍未找到，才判定失败
          if [ ! -f "$PODS_PROJECT_PATH" ]; then
            echo "❌ Pods.xcodeproj not found after $MAX_RETRIES retries!"
            # 输出目录结构供排查
            echo "Current directory: $PWD"
            echo "Directory contents:"
            ls -la
            echo "Pods directory contents:"
            ls -la Pods/
            exit 1
          fi

      # 6. 修改Xcode配置（抑制GLES警告 + 禁用签名）
      - name: Configure Xcode (suppress warnings + disable signing)
        run: |
          cd ios
          # 安装xcodeproj工具
          sudo gem install xcodeproj --no-document
          
          # Ruby脚本：修改Runner和Pods项目
          ruby -e '
            require "xcodeproj"
            require "fileutils"

            #######################################
            # 1. 修改Runner项目
            #######################################
            runner_project_path = "Runner.xcodeproj"
            if File.exist?(runner_project_path)
              runner_project = Xcodeproj::Project.open(runner_project_path)
              runner_target = runner_project.targets.find { |t| t.name == "Runner" }
              
              runner_target.build_configurations.each do |config|
                # 抑制OpenGLES废弃警告
                config.build_settings["OTHER_SWIFT_FLAGS"] ||= []
                config.build_settings["OTHER_SWIFT_FLAGS"] << "-DGLES_SILENCE_DEPRECATION"
                config.build_settings["OTHER_CFLAGS"] ||= []
                config.build_settings["OTHER_CFLAGS"] << "-DGLES_SILENCE_DEPRECATION"
                # 禁用签名
                config.build_settings["DEVELOPMENT_TEAM"] = ""
                config.build_settings["CODE_SIGNING_REQUIRED"] = "NO"
                config.build_settings["CODE_SIGNING_ALLOWED"] = "NO"
              end
              
              runner_project.save
              puts "✅ Updated Runner project"
            else
              puts "❌ Runner.xcodeproj not found!"
              exit 1
            end

            #######################################
            # 2. 修改Pods项目（针对media_kit_video）
            #######################################
            pods_project_path = "Pods/Pods.xcodeproj"
            if File.exist?(pods_project_path)
              pods_project = Xcodeproj::Project.open(pods_project_path)
              pods_project.targets.each do |pod_target|
                next unless pod_target.name.include?("media_kit_video")
                
                pod_target.build_configurations.each do |config|
                  config.build_settings["OTHER_SWIFT_FLAGS"] ||= []
                  config.build_settings["OTHER_SWIFT_FLAGS"] << "-DGLES_SILENCE_DEPRECATION"
                  config.build_settings["OTHER_CFLAGS"] ||= []
                  config.build_settings["OTHER_CFLAGS"] << "-DGLES_SILENCE_DEPRECATION"
                end
                puts "✅ Updated media_kit_video pod"
              end
              
              pods_project.save
            else
              puts "❌ Pods.xcodeproj not found (this should not happen after pod install)"
              exit 1
            end
          '

      # 7. 构建iOS版本
      - name: Build iOS Release
        run: |
          flutter build ios --release --no-codesign --verbose \
            --no-tree-shake-icons
          
          # 验证构建产物
          APP_PATH="build/ios/iphoneos/Runner.app"
          if [ -d "$APP_PATH" ]; then
            echo "✅ Build succeeded! App size: $(du -sh "$APP_PATH")"
          else
            echo "❌ Build failed - Runner.app not found at $APP_PATH"
            exit 1
          fi

      # 8. 打包IPA
      - name: Package IPA
        run: |
          BUILD_PATH="build/ios/iphoneos"
          mkdir -p "$BUILD_PATH/Payload"
          mv "$BUILD_PATH/Runner.app" "$BUILD_PATH/Payload/"
          cd "$BUILD_PATH"
          zip -qq -r -9 FlutterIpaExport.ipa Payload
          
          # 验证IPA
          if [ -f "FlutterIpaExport.ipa" ]; then
            echo "✅ IPA generated! Size: $(du -sh FlutterIpaExport.ipa)"
          else
            echo "❌ IPA generation failed"
            exit 1
          fi

      # 9. 上传产物
      - name: Upload IPA to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-ios-ipa
          path: build/ios/iphoneos/FlutterIpaExport.ipa
          retention-days: 30
